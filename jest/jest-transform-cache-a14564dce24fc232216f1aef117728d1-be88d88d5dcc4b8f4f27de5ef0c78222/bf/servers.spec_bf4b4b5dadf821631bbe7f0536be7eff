'use strict';var _chai = require('chai');
var _src = require('../src');
var _utils = require('./../src/utils');
var _utilsStub = require('./utils-stub');var _utilsStub2 = _interopRequireDefault(_utilsStub);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}


function loadConfig() {
  return (0, _utils.readJSONFile)(_utilsStub2.default.TMP_FIXTURE_PATH);
}

describe('servers', () => {
  _utilsStub2.default.getConfigPath.install({ copyFixtureToTemp: true });

  describe('.getAll', () => {
    it('should load servers from file', _asyncToGenerator(function* () {
      const fixture = yield loadConfig();
      const result = yield _src.servers.getAll();
      (0, _chai.expect)(result).to.eql(fixture.servers);
    }));
  });

  describe('.add', () => {
    it('should add new server', _asyncToGenerator(function* () {
      const configBefore = yield loadConfig();
      const newServer = {
        name: 'My New Mysql Server',
        client: 'mysql',
        ssl: true,
        host: '10.10.10.15',
        port: 3306,
        database: 'authentication',
        user: 'root',
        password: 'password' };

      const createdServer = yield _src.servers.add(newServer);
      (0, _chai.expect)(createdServer).to.have.property('id');
      delete createdServer.id;
      (0, _chai.expect)(createdServer).to.eql(newServer);

      const configAfter = yield loadConfig();
      (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length + 1);
    }));

    it('should add new server with ssh', _asyncToGenerator(function* () {
      const configBefore = yield loadConfig();
      const newServer = {
        name: 'My New Mysql Server',
        client: 'mysql',
        ssl: true,
        host: '10.10.10.15',
        port: 3306,
        database: 'authentication',
        user: 'root',
        password: 'password',
        ssh: {
          host: '10.10.10.10',
          port: 22,
          user: 'root',
          privateKey: '~/.ssh/id_rsa',
          privateKeyWithPassphrase: true } };


      const createdServer = yield _src.servers.add(newServer);
      (0, _chai.expect)(createdServer).to.have.property('id');
      delete createdServer.id;
      (0, _chai.expect)(createdServer).to.eql(newServer);

      const configAfter = yield loadConfig();
      (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length + 1);
    }));
  });

  describe('.update', () => {
    it('should update existing server', _asyncToGenerator(function* () {
      const id = 'ed2d52a7-d8ff-4fdd-897a-7033dee598f4';
      const configBefore = yield loadConfig();
      const serverToUpdate = {
        id,
        name: 'mysql-vm',
        client: 'mysql',
        ssl: false,
        host: '10.10.10.10',
        port: 3306,
        database: 'mydb',
        user: 'usr',
        password: 'pwd' };

      const updatedServer = yield _src.servers.update(serverToUpdate);
      (0, _chai.expect)(updatedServer).to.eql(serverToUpdate);

      const configAfter = yield loadConfig();
      (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length);
      (0, _chai.expect)(configAfter.servers.find(function (srv) {return srv.id === id;})).to.eql(serverToUpdate);
    }));
  });

  describe('.addOrUpdate', () => {
    describe('given is a new server', () => {
      it('should add the new server', _asyncToGenerator(function* () {
        const configBefore = yield loadConfig();
        const newServer = {
          name: 'My New Mysql Server',
          client: 'mysql',
          ssl: false,
          host: '10.10.10.15',
          port: 3306,
          database: 'authentication',
          user: 'root',
          password: 'password' };

        const createdServer = yield _src.servers.addOrUpdate(newServer);
        (0, _chai.expect)(createdServer).to.have.property('id');
        delete createdServer.id;
        (0, _chai.expect)(createdServer).to.eql(newServer);

        const configAfter = yield loadConfig();
        (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length + 1);
      }));
    });

    describe('given is an existing server', () => {
      it('should update this existing server', _asyncToGenerator(function* () {
        const configBefore = yield loadConfig();
        const id = 'ed2d52a7-d8ff-4fdd-897a-7033dee598f4';
        const serverToUpdate = {
          id,
          name: 'mysql-vm',
          client: 'mysql',
          ssl: false,
          host: '10.10.10.10',
          port: 3306,
          database: 'mydb',
          user: 'usr',
          password: 'pwd' };

        const updatedServer = yield _src.servers.addOrUpdate(serverToUpdate);
        (0, _chai.expect)(updatedServer).to.eql(serverToUpdate);

        const configAfter = yield loadConfig();
        (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length);
        (0, _chai.expect)(configAfter.servers.find(function (srv) {return srv.id === id;})).to.eql(serverToUpdate);
      }));
    });
  });

  describe('.remove', () => {
    it('should remove an existing server', _asyncToGenerator(function* () {
      const configBefore = yield loadConfig();
      yield _src.servers.removeById('c94cbafa-8977-4142-9f34-c84d382d8731');

      const configAfter = yield loadConfig();
      (0, _chai.expect)(configAfter.servers.length).to.eql(configBefore.servers.length - 1);
      (0, _chai.expect)(configAfter.servers.find(function (srv) {return srv.name === 'pg-vm';})).to.eql(undefined);
    }));
  });
});